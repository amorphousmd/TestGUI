# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui1.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QImage
import cv2, imutils
from mmcv import Config
from mmdet.apis.inference import inference_detector
import mmcv
from mmcv.runner import load_checkpoint
from mmdet.apis import inference_detector, show_result_pyplot
from mmdet.models import build_detector
import numpy as np
from solo_v2 import detect_center
import time
from client import *

class Ui_GUI1(object):
    def setupUi(self, GUI1):
        GUI1.setObjectName("GUI1")
        GUI1.resize(1284, 643)
        self.centralwidget = QtWidgets.QWidget(GUI1)
        self.centralwidget.setObjectName("centralwidget")
        self.Img_show = QtWidgets.QLabel(self.centralwidget)
        self.Img_show.setGeometry(QtCore.QRect(40, 40, 621, 571))
        self.Img_show.setObjectName("Img_show")
        self.Model_cbbox = QtWidgets.QComboBox(self.centralwidget)
        self.Model_cbbox.setGeometry(QtCore.QRect(960, 50, 111, 41))
        self.Model_cbbox.setObjectName("Model_cbbox")
        self.Model_cbbox.addItem("")
        self.Model_cbbox.addItem("")
        self.Model_cbbox.addItem("")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(720, 30, 21, 571))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(850, 60, 63, 20))
        self.label_2.setObjectName("label_2")
        self.Run_btn = QtWidgets.QPushButton(self.centralwidget)
        self.Run_btn.setGeometry(QtCore.QRect(860, 280, 93, 29))
        self.Run_btn.setObjectName("Run_btn")
        self.Load_btn = QtWidgets.QPushButton(self.centralwidget)
        self.Load_btn.setGeometry(QtCore.QRect(860, 240, 93, 29))
        self.Load_btn.setObjectName("Load_btn")
        self.Save_btn = QtWidgets.QPushButton(self.centralwidget)
        self.Save_btn.setGeometry(QtCore.QRect(960, 240, 93, 29))
        self.Save_btn.setObjectName("Save_btn")
        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        self.splitter.setGeometry(QtCore.QRect(850, 170, 401, 22))
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.label_3 = QtWidgets.QLabel(self.splitter)
        self.label_3.setObjectName("label_3")
        self.score_thr_txt = QtWidgets.QLabel(self.splitter)
        self.score_thr_txt.setObjectName("score_thr_txt")
        self.score_thr_slider = QtWidgets.QSlider(self.splitter)
        self.score_thr_slider.setMaximum(100)
        self.score_thr_slider.setSingleStep(1)
        self.score_thr_slider.setOrientation(QtCore.Qt.Horizontal)
        self.score_thr_slider.setObjectName("score_thr_slider")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(850, 120, 141, 21))
        self.widget.setObjectName("widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_4 = QtWidgets.QLabel(self.widget)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout.addWidget(self.label_4)
        self.time_txt = QtWidgets.QLabel(self.widget)
        self.time_txt.setObjectName("time_txt")
        self.horizontalLayout.addWidget(self.time_txt)
        GUI1.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(GUI1)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1284, 26))
        self.menubar.setObjectName("menubar")
        GUI1.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(GUI1)
        self.statusbar.setObjectName("statusbar")
        GUI1.setStatusBar(self.statusbar)

        self.retranslateUi(GUI1)
        self.score_thr_slider.valueChanged['int'].connect(self.score_value)
        self.Load_btn.clicked.connect(self.load_image)
        self.Save_btn.clicked.connect(self.save_image)
        self.Run_btn.clicked.connect(self.detect)

        self.Model_cbbox.currentIndexChanged.connect(self.load_model)
        QtCore.QMetaObject.connectSlotsByName(GUI1)

        self.score_thr_value = 0.5
        self.time = 0.0
        self.time_start = 0
        self.time_detect = 0

    def score_value(self, value):
        self.score_thr_value = value/100
        self.score_thr_txt.setText(str(self.score_thr_value))
        print(self.score_thr_value)
        # self.update()

    def load_model(self, i):
        if i == 1:
            cfg = Config.fromfile('mmdetection/configs/solov2/solov2_light_r18_fpn_3x_coco.py')
            cfg.model.mask_head.num_classes = 1
            checkpoint = 'training_weights/hhn_solov2.pth'
            model = build_detector(cfg.model)
            checkpoint = load_checkpoint(model, checkpoint, map_location='cpu')
            model.CLASSES = checkpoint['meta']['CLASSES']
            model.cfg = cfg
            model.to('cuda')
            model.eval()
            self.model = model

    def detect(self):
        self.time_start = time.time()

        result = inference_detector(self.model, self.image)
        img_show = self.model.show_result(
            self.image,
            result,
            score_thr=self.score_thr_value,
            show=False,
            wait_time=0,
            win_name='result',
            bbox_color=None,
            text_color=(200, 200, 200),
            mask_color=None,
            out_file=None)
        self.time_detect = time.time() - self.time_start
        self.time_txt.setText(str(self.time_detect))
        self.set_image(img_show)
        center_list = detect_center(self.image, result, 0.4)
        # sendData(zeroExtend(center_list))
        # sendData(zeroExtend(center_list))
        # sendData(zeroExtend(center_list))
        for center in center_list:
            img_show = cv2.circle(img_show, center, 10, (0, 0, 255), -1)
        self.set_image(img_show)



    def load_image(self):
        self.filename = QFileDialog.getOpenFileName(filter="Image (*.*)")[0]
        self.image = cv2.imread(self.filename)
        self.set_image(self.image)

    def set_image(self, image):
        """ This function will take image input and resize it
            only for display purpose and convert it to QImage
            to set at the label.
        """
        self.tmp = image
        image = imutils.resize(image, width=640)
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
        self.Img_show.setPixmap(QtGui.QPixmap.fromImage(image))

    def save_image(self):
        """ This function will save the image"""
        # here provide the output file name
        # lets say we want to save the output as a time stamp
        # uncomment the two lines below

        # import time
        # filename = 'Snapshot '+str(time.strftime("%Y-%b-%d at %H.%M.%S %p"))+'.png'

        # Or we can give any name such as output.jpg or output.png as well
        # filename = 'Snapshot.png'

        # Or a much better option is to let user decide the location and the extension
        # using a file dialog.

        filename = QFileDialog.getSaveFileName(filter="JPG(*.jpg);;PNG(*.png);;TIFF(*.tiff);;BMP(*.bmp)")[0]

        cv2.imwrite(filename, self.tmp)
        print('Image saved as:', self.filename)

    def update(self):
        """ This function will update the photo according to the
            current values of blur and brightness and set it to photo label.
        """
        img = self.changeBrightness(self.image, self.brightness_value_now)
        img = self.changeBlur(img, self.blur_value_now)
        self.set_image(img)


    def retranslateUi(self, GUI1):
        _translate = QtCore.QCoreApplication.translate
        GUI1.setWindowTitle(_translate("GUI1", "GUI1"))
        self.Img_show.setText(_translate("GUI1", "TextLabel"))
        self.Model_cbbox.setItemText(0, _translate("GUI1", ""))
        self.Model_cbbox.setItemText(1, _translate("GUI1", "Solov2_light"))
        self.Model_cbbox.setItemText(2, _translate("GUI1", "Yolov5"))
        self.Model_cbbox.setItemText(3, _translate("GUI1", "Yolov7"))
        self.label_2.setText(_translate("GUI1", "Model:"))
        self.Run_btn.setText(_translate("GUI1", "Run"))
        self.Load_btn.setText(_translate("GUI1", "Load Image"))
        self.Save_btn.setText(_translate("GUI1", "Save Image"))
        self.label_3.setText(_translate("GUI1", "Score threshold:"))
        self.score_thr_txt.setText(_translate("GUI1", "0.00"))
        self.label_4.setText(_translate("GUI1", "Time(s):"))
        self.time_txt.setText(_translate("GUI1", "0.00"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    GUI1 = QtWidgets.QMainWindow()
    ui = Ui_GUI1()
    ui.setupUi(GUI1)
    GUI1.show()
    sys.exit(app.exec_())
